package shipDock.framework.core.action
{
	import shipDock.framework.core.interfaces.INotice;
	import shipDock.framework.core.interfaces.ISDViewAction;
	import shipDock.framework.core.notice.SDNoticeName;
	import shipDock.ui.IView;
	
	/**
	 * 界面的逻辑代理类
	 *
	 * @author ch.ji
	 *
	 */
	public class SDViewActoin extends Action implements ISDViewAction
	{
		
		/*与此逻辑代理相关的视图界面对象*/
		private var _view:IView;
		/*与此逻辑代理相关的视图界面对象的类*/
		private var _viewClass:Class;
		
		public function SDViewActoin(name:String, cls:Class)
		{
			super(name);
			this._viewClass = cls;
		}
		
		override public function setProxyed(target:*):void
		{
			if (!(target is IView))
				throw new Error("【SD VIEW ACTION】Error setProxyed: target must is a IView instance!");
			this._isInit = true;
			this._proxyed = target;
		}
		
		/**
		 * 初始化视图界面逻辑代理感兴趣的消息和命令
		 *
		 */
		private function initListeners():void
		{
			var list:Array = this.listeners;
			var i:int = 0;
			var max:int = list.length;
			var name:String;
			var cls:Class;
			while (i < max)
			{
				name = list[i];
				if (!!name)
				{
					cls = this._actionCotroller.getPreregisteredCommand(name);
					if (!!cls) //感兴趣的命令，用于处理一族消息集合
						this.registered(name, cls);
					else //感兴趣的消息，用于处理广播消息
						this.addNotice(name, this.viewNotify);
				}
				i++;
			}
		}
		
		/**
		 * 重置视图界面逻辑代理感兴趣的消息和命令
		 *
		 */
		protected function resetListeners():void
		{
			var list:Array = this.listeners;
			var i:int = 0;
			var max:int = list.length;
			var name:String;
			var cls:Class;
			while (i < max)
			{
				name = list[i];
				if (!!name)
				{
					cls = this._actionCotroller.getPreregisteredCommand(name);
					if (!!cls) //移除命令
						this._commandController.removeCommand(this, name);
					else //移除消息
						this.removeNotice(name, this.viewNotify);
				}
				i++;
			}
		}
		
		/**
		 * 统一处理外部传入的消息
		 * 
		 * @param	notice
		 * @return
		 */
		protected function viewNotify(notice:INotice):* {
			return null;
		}
		
		/**
		 * 创建视图界面对象
		 *
		 */
		protected function createView():void
		{
			//override it for create view instance
		}
		
		/**
		 * 初始化视图界面代理
		 *
		 */
		protected function initViewAction():void
		{
		
		}
		
		/**
		 * 重置视图界面代理
		 *
		 */
		protected function resetViewAction():void
		{
		
		}
		
		/**
		 * 激活视图界面
		 *
		 */
		public function openView():void
		{
			this.initListeners();
			this.createView();
			this.initViewAction();
			(this._view) && this.setProxyed(this._view); //设置代理的目标视图界面
		}
		
		/**
		 * 关闭视图界面
		 *
		 * 并非完全销毁，仅回收视图界面对象
		 *
		 */
		public function closeView():void
		{
			this.resetViewAction();
			this.resetView();
			this.resetListeners();
		}
		
		protected function resetView():void
		{
			(this._view) && this._view.dispose();
			this._view = null;
			this._proxyed = null;
		}
		
		/**
		 * 此视图界面逻辑代理类感兴趣的消息、命令列表
		 *
		 * 由实现了INoticeListener接口的对象构成的Array
		 *
		 */
		protected function get listeners():Array
		{
			return [SDNoticeName.OPEN_VIEW, SDNoticeName.CLOSE_VIEW]; //INoticeListener elements
		}
		
		/**
		 * getter 逻辑代理类代理的视图界面对象
		 *
		 */
		public function get view():IView
		{
			return _view;
		}
	}
}