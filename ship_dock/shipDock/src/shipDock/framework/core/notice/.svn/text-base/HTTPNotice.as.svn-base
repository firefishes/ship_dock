package shipDock.framework.core.notice
{
	import shipDock.framework.core.command.HTTPCommand;
	import shipDock.framework.core.notice.SDNoticeName;
	import shipDock.framework.core.interfaces.IHTTPNotice;
	import shipDock.framework.core.interfaces.IHTTPToken;
	import shipDock.framework.core.interfaces.INotice;
	import shipDock.framework.core.notice.Notice;
	import shipDock.framework.core.manager.NoticeManager;
	import shipDock.framework.core.manager.NoticeManager;
	
	/**
	 * HTTP网络请求消息类，负责发送网络请求
	 * 
	 * 配合HTTP网络请求命令类封装和调用逻辑，并发送HTTP网络请求的消息
	 *
	 * ...
	 * @author shaoxin.ji
	 */
	public class HTTPNotice extends Notice implements IHTTPNotice
	{
		private var _isFalseData:Boolean;//是否使用假数据
		private var _method:String;//服务端接口名
		private var _doSuccess:Function;//服务端交互成功时的回调函数
		private var _doFail:Function;//服务端交互失败时的回调函数
		private var _token:IHTTPToken;//HTTP请求的具体处理对象
		private var _isUseDefaultFail:Boolean;//是否使用默认的服务端交互失败情况处理
		private var _dataFormat:String;//设置到HTTP请求具体处理对象 token 的数据格式属性
		private var _requestMethod:String;//设置到HTTP请求具体处理对象 token 的请求方式属性
		
		public function HTTPNotice(method:String, params:Object = null, doSuccess:Function = null, doFail:Function = null, token:IHTTPToken = null, isUseDefaultFail:Boolean = true, dataFormat:String = null, requestMethod:String = "POST")
		{
			this.method = method;
			this.doSuccess = doSuccess;
			this.doFail = doFail;
			this.token = token;
			this.isUseDefaultFail = isUseDefaultFail;
			this.dataFormat = dataFormat;
			this.requestMethod = requestMethod;
			
			this.subCommand = HTTPCommand.SEND_HTTP_SERVER_COMMAND;
			super(SDNoticeName.SD_HTTP, params);
		
		}
		
		/**
		 * 覆盖此方法，以改变服务端交互成功时的处理
		 * 
		 * @param	result
		 */
		public function successed(result:Object):void
		{
			if (this.doSuccess != null)
			{
				this.doSuccess(result);
			}
		}
		
		/**
		 * 覆盖此方法，以改变服务端交互失败时的处理
		 * 
		 * @param	result
		 */
		public function failed(result:Object):void
		{
			if (this.doFail != null)
			{
				this.doFail(result);
			}
		}
		
		/**
		 * 发送消息
		 *
		 * @param	notice
		 * @return
		 */
		public function sendNotice(notice:INotice):*
		{
			var result:* = NoticeManager.sendNotice(notice);
			return result;
		}
		
		/**
		 * getter 服务端接口名
		 * 
		 */
		public function get method():String
		{
			return _method;
		}
		
		/**
		 * setter 服务端接口名
		 * 
		 */
		public function set method(value:String):void
		{
			_method = value;
		}
		
		/**
		 * getter 服务端交互成功时的回调函数
		 * 
		 */
		public function get doSuccess():Function
		{
			return _doSuccess;
		}
		
		/**
		 * setter 服务端交互成功时的回调函数
		 * 
		 */
		public function set doSuccess(value:Function):void
		{
			_doSuccess = value;
		}
		
		/**
		 * getter 服务端交互失败时的回调函数
		 * 
		 */
		public function get doFail():Function
		{
			return _doFail;
		}
		
		/**
		 * setter 服务端交互失败时的回调函数
		 * 
		 */
		public function set doFail(value:Function):void
		{
			_doFail = value;
		}
		
		/**
		 * getter HTTP请求的具体处理对象
		 * 
		 */
		public function get token():IHTTPToken
		{
			return _token;
		}
		
		/**
		 * setter HTTP请求的具体处理对象
		 * 
		 */
		public function set token(value:IHTTPToken):void
		{
			_token = value;
		}
		
		/**
		 * getter 是否使用默认的服务端交互失败情况处理
		 * 
		 */
		public function get isUseDefaultFail():Boolean
		{
			return _isUseDefaultFail;
		}
		
		/**
		 * setter 是否使用默认的服务端交互失败情况处理
		 * 
		 */
		public function set isUseDefaultFail(value:Boolean):void
		{
			_isUseDefaultFail = value;
		}
		
		/**
		 * getter 设置到HTTP请求具体处理对象 token 的数据格式属性
		 * 
		 */
		public function get dataFormat():String
		{
			return _dataFormat;
		}
		
		/**
		 * setter 设置到HTTP请求具体处理对象 token 的数据格式属性
		 * 
		 */
		public function set dataFormat(value:String):void
		{
			_dataFormat = value;
		}
		
		/**
		 * getter 设置到HTTP请求具体处理对象 token 的请求方式属性
		 * 
		 */
		public function get requestMethod():String
		{
			return _requestMethod;
		}
		
		/**
		 * setter 设置到HTTP请求具体处理对象 token 的请求方式属性
		 * 
		 */
		public function set requestMethod(value:String):void
		{
			_requestMethod = value;
		}
		
		/**
		 * getter 是否使用假数据
		 *
		 */
		public function get isFalseData():Boolean
		{
			return _isFalseData;
		}
		
		/**
		 * setter 是否使用假数据
		 * 
		 */
		public function set isFalseData(value:Boolean):void
		{
			_isFalseData = value;
		}
	
	}

}