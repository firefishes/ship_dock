package shipDock.data
{
	import flash.events.ProgressEvent;
	
	import shipDock.framework.application.interfaces.IAssetQueueLoader;
	import shipDock.framework.core.observer.DataProxy;
	import shipDock.framework.core.utils.HashMap;
	import shipDock.framework.core.utils.SDUtils;
	
	import starling.events.Event;
	import starling.events.EventDispatcher;
	
	/**
	 * 素材队列加载代理
	 *
	 * ...
	 * @author shaoxin.ji
	 */
	public class QueueLoaderProxy extends DataProxy
	{
		
		public static const NAME:String = "loadFileAssetProxy";
		
		private static const KEY_LIST:String = "list";
		private static const KEY_LOADER:String = "loader";
		private static const KEY_LOADER_CLASS:String = "loaderClass";
		private static const KEY_CLASS_ARGS:String = "classArgs";
		
		private var _assetLoadListMap:HashMap;
		
		public function QueueLoaderProxy()
		{
			super(NAME);
			this._assetLoadListMap = new HashMap();
		}
		
		override public function dispose():void
		{
			super.dispose();
			
			this._assetLoadListMap.clear();
		}
		
		/**
		 * 添加素材加载队列
		 *
		 * @param	loadID
		 * @param	list
		 * @param	loaderClass
		 * @param	args
		 */
		public function addAssetList(loadID:String, list:*, loaderClass:Class, args:Array = null):void
		{
			var data:Object = this._assetLoadListMap.getValue(loadID);
			
			(data == null) && (data = {}); //初始化数据
			(data[KEY_LIST] == null) && (data[KEY_LIST] = []); //初始化素材列表
			(args == null) && (args = []); //初始化加载器实例所需的参数
			
			data[KEY_LIST] = data[KEY_LIST].concat(list);
			(data[KEY_LOADER_CLASS] == null) && (data[KEY_LOADER_CLASS] = loaderClass);
			(data[KEY_CLASS_ARGS] == null) && (data[KEY_CLASS_ARGS] = args);
			
			this._assetLoadListMap.put(loadID, data); //覆盖素材队列数据
		}
		
		/**
		 * 启动代理中的加载队列
		 *
		 * @param	loadID
		 */
		public function startLoad(loadID:String):void
		{
			var data:Object = this._assetLoadListMap.getValue(loadID);
			
			var list:Array = data[KEY_LIST];
			var cls:Class = data[KEY_LOADER_CLASS];
			var clsArgs:Array = data[KEY_CLASS_ARGS];
			var loader:IAssetQueueLoader = data[KEY_LOADER];
			(!!loader) && loader.dispose();
			
			var args:Array = list.concat(clsArgs);
			loader = SDUtils.createInstance(cls, args);
			if (!!loader)
			{
				(loader as EventDispatcher).addEventListener(Event.COMPLETE, this.queueLoaderCompleteHandler);
				(loader as EventDispatcher).addEventListener(ProgressEvent.PROGRESS, this.queueLoaderProgressHandler);
				data[KEY_LOADER] = loader;
				loader.name = loadID;
				this._assetLoadListMap.put(loadID, loader);
				loader.commit();
			}
		}
		
		/**
		 * 默认的加载过程回调
		 *
		 * @param	event
		 */
		private function queueLoaderProgressHandler(event:*):void
		{
		}
		
		/**
		 * 默认的加载完成回调
		 *
		 * @param	event
		 */
		private function queueLoaderCompleteHandler(event:*):void
		{
			var target:IAssetQueueLoader = event.target;
			(target as EventDispatcher).removeEventListener(Event.COMPLETE, this.queueLoaderCompleteHandler);
			(target as EventDispatcher).removeEventListener(ProgressEvent.PROGRESS, this.queueLoaderProgressHandler);
			
		}
	}

}