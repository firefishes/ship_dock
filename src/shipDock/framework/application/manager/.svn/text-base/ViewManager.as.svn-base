package shipDock.framework.application.manager
{
	import flash.utils.getDefinitionByName;
	
	import shipDock.framework.application.events.ViewTransformEffectEvent;
	import shipDock.framework.application.interfaces.IViewTransformEffect;
	import shipDock.framework.core.manager.ObjectPoolManager;
	import shipDock.framework.core.manager.SingletonManager;
	import shipDock.framework.core.queueExecuter.QueueExecuter;
	import shipDock.framework.core.singleton.SingletonBase;
	import shipDock.framework.core.utils.SDUtils;
	import shipDock.framework.core.utils.StringUtils;
	import shipDock.ui.IView;
	
	import starling.display.DisplayObject;
	import starling.display.Sprite;
	import starling.events.Event;
	
	/**
	 * 界面转换管理器
	 *  
	 * @author ch.ji
	 * 
	 */	
	public class ViewManager extends SingletonBase
	{
		
		public static const VIEW_MANAGER:String = "viewMgr";
		
		public static function getInstance():ViewManager {
			return SingletonManager.singletonManager().getSingleton(VIEW_MANAGER) as ViewManager;
		}
		
		/*是否正在转换*/
		private var _isTransfroming:Boolean;
		/*即将切换到的界面*/
		private var _waitingView:IView;
		/*上一个界面*/
		private var _prevView:IView;
		/*当前界面*/
		private var _currentView:IView;
		/*显示过的历史 界面堆栈*/
		private var _viewStack:Array;
		/*界面总容器*/
		private var _viewContainer:Sprite;
		/*界面转换执行队列*/
		private var _transformQueue:QueueExecuter;
		/*即将切换的界面类使用的构造函数列表*/
		private var _waitingViewParams:Object;
		
		public function ViewManager()
		{
			super(this, VIEW_MANAGER);
			
			this._viewStack = [];
			this._transformQueue = ObjectPoolManager.getInstance().fromPool(QueueExecuter);
		}
		
		/**
		 * 设置界面总容器
		 * 
		 * @param container
		 * 
		 */		
		public function setViewContainer(container:Sprite):void {
			if(!!this._viewContainer) {
				this._viewContainer.removeEventListener(Event.ENTER_FRAME, this.viewTransform);
				this.cleanViewContainer();
			}
			this._viewContainer = container;
		}
		
		/**
		 * 返回上一个界面
		 * 
		 */		
		public function backToPrevView():void {
			var data:Object = this._viewStack.pop();
			if(!!data["cls"]) {
				var cls:Class = data["cls"];
				var args:Array = data["params"];
				this.changeView(cls, args);
			}
		}
		
		/**
		 * 切换界面
		 *  
		 * @param target 支持界面类或者界面实例
		 * @param clsArgs
		 * 
		 */		
		public function changeView(target:*, clsArgs:Array = null, isInStack:Boolean = false):void {
			if(this._viewContainer == null)
				return;
			(!!this._waitingView) && this._waitingView.dispose();//销毁上一个即将切换的目标界面
			if(target is Class) {
				this._waitingView = SDUtils.createInstance(target, clsArgs);
			}else if(target is IView) {
				this._waitingView = target;
			}
			if(this._waitingView == null)
				return;//即将切换的目标界面为空则截断操作
			
			var clsFullName:String = StringUtils.qualifiedClassName(this._waitingView, true);
			var cls:Class = getDefinitionByName(clsFullName) as Class;
			this._waitingViewParams = {"cls":cls, "params":clsArgs, "isInStack":isInStack};//本次创建界面堆栈所需的数据
			
			this._viewContainer.addEventListener(Event.ENTER_FRAME, this.viewTransform);//下一帧开始界面转换
		}
		
		/**
		 * 界面转换
		 *  
		 * @param event
		 * 
		 */		
		private function viewTransform(event:Event):void {
			this._viewContainer.removeEventListener(Event.ENTER_FRAME, this.viewTransform);
			
			this._transformQueue.reset();//重置执行流程
			
			this.readyForHideView(this._currentView);
			this.readyForShowView(this._waitingView);
			
			(!!this._waitingViewParams && this._waitingViewParams["isInStack"]) && 
				this._viewStack.push(this._waitingViewParams);//加入界面堆栈
			this._waitingViewParams = null;
			
			this._prevView = this._currentView;
			this._currentView = this._waitingView;
			this._waitingView = null;
			
			this._transformQueue.commit();
		}
		
		/**
		 * 准备界面消失的操作流程
		 *  
		 * @param view
		 * 
		 */		
		private function readyForHideView(view:IView):void {
			if(!!view) {
				if(!!view.hideTransformEffect) {//如果上一个界面有消失特效
					var transformEffect:IViewTransformEffect = view.hideTransformEffect;
					transformEffect.eventDispatcher.addEventListener(ViewTransformEffectEvent.HIDE_TRANSFORM_COMPLETE_EVENT, this.hidePrevView);
					this._transformQueue.add(view.hideTransformEffect);
				}else {
					this._transformQueue.add(this.hidePrevView);
				}
			}
		}
		
		/**
		 * 准备界面出现的操作流程
		 * 
		 * @param view
		 * 
		 */		
		private function readyForShowView(view:IView):void {
			if(!!view.showTransformEffect) {//如果当前界面有出现特效
				var transformEffect:IViewTransformEffect = view.showTransformEffect;
				transformEffect.eventDispatcher.addEventListener(ViewTransformEffectEvent.SHOW_TRANSFORM_COMPLETE_EVENT, this.showCurrentView);
				this._transformQueue.add(view.showTransformEffect);
			}else {
				this._transformQueue.add(this.showCurrentView);
			}
		}
		
		/**
		 * 显示当前界面
		 *  
		 * @param event
		 * 
		 */		
		private function showCurrentView(event:ViewTransformEffectEvent = null):void {
			event.target.removeEventListener(ViewTransformEffectEvent.SHOW_TRANSFORM_COMPLETE_EVENT, this.showCurrentView);
			(!!this._currentView) && this._viewContainer.addChild(this._currentView as DisplayObject);
		}
		
		/**
		 * 隐藏上一个界面
		 *  
		 * @param event
		 * 
		 */		
		private function hidePrevView(event:ViewTransformEffectEvent = null):void {
			event.target.removeEventListener(ViewTransformEffectEvent.HIDE_TRANSFORM_COMPLETE_EVENT, this.hidePrevView);
			if(!!this._prevView) {
				(this._prevView as DisplayObject).removeFromParent();
				_prevView.dispose();
			}
		}
		
		/**
		 * 清除总容器里的内容 
		 * 
		 */		
		private function cleanViewContainer():void {
			this._viewContainer.removeChildren();
			if(!!this._waitingView) {
				this._waitingView.dispose();
				this._waitingView = null;
			}
			if(!!this._prevView) {
				this._prevView.dispose();
				this._prevView = null;
			}
			if(!!this._currentView) {
				this._currentView.dispose();
				this._currentView = null;
			}
		}

		public function get isTransfroming():Boolean
		{
			return _isTransfroming;
		}

	}
}