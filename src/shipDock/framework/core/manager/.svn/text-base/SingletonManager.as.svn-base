package shipDock.framework.core.manager 
{
	import flash.utils.getDefinitionByName;
	import shipDock.framework.core.interfaces.ISingleton;
	import shipDock.framework.core.utils.HashMap;
	import shipDock.framework.core.utils.StringUtils;
	
	/**
	 * 单例管理器（单例）
	 * 
	 * ...
	 * @author shaoxin.ji
	 */
	public class SingletonManager implements ISingleton
	{
		
		public static const SINGLETON_MANANGER:String = "singletonMananger";
		public static const SINGLETON_ERROR:String = "【SINGLETON ERROR】{class} singleton is exist!";
		
		/*管理器的单例*/
		private static var instance:SingletonManager;
		
		/*完全限定名集合*/
		private var _fullNameMap:HashMap;
		/*单例集合*/
		private var _singletonMap:HashMap;
		
		/**
		 * 获取单例
		 * 
		 * @return
		 */
		public static function singletonManager():SingletonManager {
			if (instance == null) {
				instance = new SingletonManager();
			}
			return instance;
		}
		
		/**
		 * 通过实例获取单例单例管理器的单例
		 * 
		 * @return
		 */
		public function getInstance():ISingleton {
			return getInstance();
		}
		
		/**
		 * 抛出一个单例异常错误
		 * 
		 * @param	instance
		 */
		public static function throwSingletonError(instance:ISingleton):void {
			var msg:String = SINGLETON_ERROR.replace("{class}", StringUtils.qualifiedClassName(instance));
			throw new Error(msg);
		}
		
		public function SingletonManager() 
		{
			if (instance != null) {//检查是否被创建多次
				throwSingletonError(this);
			}
			this._fullNameMap = new HashMap();
			this._singletonMap = new HashMap();
			
			this.initSingleton();
		}
		
		/**
		 * 单例制作入口
		 * 
		 * @param target 支持函数，类，完全限定名，数组
		 * 
		 * 入口使用方式一：
		 * class MySingleton extends Singleton {//单例1
		 * 		....
		 * }
		 * 
		 * class MySingleton2 extends Singleton {//单例2
		 * 		....
		 * }
		 * 
		 * var method:Function = function ():void {//制作单例的回调
		 * 		new MySingleton();
		 * 		new MySingleton2();
		 * };
		 * 
		 * SingletonManager.getInstance().addSingleton(method);//传入制作入口
		 * 
		 * 入口使用方式二：
		 * class MySingleton3 extends Singleton {//单例3
		 * 		....
		 * }
		 * 
		 * SingletonManager.getInstance().addSingleton(MySingleton3);
		 * 
		 * 入口使用方式三：
		 * class MySingleton4 extends Singleton {//单例4
		 * 		....
		 * }
		 * 
		 * SingletonManager.getInstance().addSingleton([MySingleton4]);
		 * 
		 * @param	target
		 */
		public function addSingleton(target:*):void {
			if (target == null)
				return;
			var cls:Class;
			if (target is Array) {
				while((target as Array).length > 0) 
					addSingleton((target as Array).shift());
					
			}else if (target is Function) {
				target();
				
			}else if (target is Class) {
				cls = target;
				new cls();
				
			}else if (target is String) {
				cls = getDefinitionByName(target) as Class;
				addSingleton(cls);
			}
		}
		
		/**
		 * 查找单例
		 * 
		 * @param	target 查找依据，可以是实例，类名，单例名
		 * @param	isRemove 是否移除
		 * @return
		 */
		private function findSingleton(target:*, isRemove:Boolean = false):ISingleton {
			var result:ISingleton;
			if ((target is String) || (target is Class)) {
				var fullName:String;
				if ((target is String) && (String(target).indexOf("::") != -1)) {//若使用完全限定名的方式
					result = this._fullNameMap.getValue(target, isRemove) as ISingleton;
					
					if (isRemove && (result != null)) {
						fullName = StringUtils.qualifiedClassName(result, true);
						var cls:Class = getDefinitionByName(fullName) as Class;
						this._singletonMap.remove(result.singletonName);
						this._singletonMap.remove(cls);
					}
				}else {//其他方式（类、单例对象、单例名字符串）
					
					result = this._singletonMap.getValue(target, isRemove) as ISingleton;
					
					if (isRemove && (result != null)) {
						fullName = StringUtils.qualifiedClassName(result, true);
						this._fullNameMap.remove(fullName);
					}
				}
			}
			return result;
		}
		
		/**
		 * 获取一个特定类的单例
		 * 
		 * @param	target 查找依据，可以是实例，类名，单例名
		 * @return
		 */
		public function getSingleton(target:*):ISingleton {
			var result:ISingleton = this.findSingleton(target);
			if (result == null)
				return null;
			return (result.singleRefrence == result) ? result : result.singleRefrence;
		}
		
		/**
		 * 移除一个特定类的单例
		 * 
		 * @param	target 查找依据，可以是实例，类名，单例名
		 * @return
		 */
		public function removeSingleton(target:*):ISingleton {
			return this.findSingleton(target, true);
		}
		
		/**
		 * 注册自己为单例
		 * 
		 */
		public function initSingleton():void {
			this.registeredSingleton(this);
		}
		
		/**
		 * 向管理器注册某个类的单例
		 * 
		 * @param	instance
		 */
		public function registeredSingleton(instance:ISingleton):void {
			var flag:Boolean = this.hasSingleton(instance, false);
			if (!flag) {
				var fullName:String = StringUtils.qualifiedClassName(instance, true);
				var cls:Class = getDefinitionByName(fullName) as Class;
				
				this._fullNameMap.put(fullName, instance);//以类的完全限定名为Key保存单例
				
				this._singletonMap.put(instance.singletonName, instance);//以单例名为Key保存单例
				this._singletonMap.put(cls, instance);//以类对象为Key保存单例
			}
		}
		
		/**
		 * 检查是否存在某个类的单例对象
		 * 
		 * @param	instance
		 * @param	isThrowError
		 * @return
		 */
		public function hasSingleton(instance:ISingleton, isThrowError:Boolean = true):Boolean {
			var fullName:String = StringUtils.qualifiedClassName(instance, true);
			var result:Boolean = this._fullNameMap.isContainsKey(fullName);
			if (result && isThrowError) {
				SingletonManager.throwSingletonError(instance);
			}
			return result;
		}
		
		/**
		 * 获取单例名
		 * 
		 */
		public function get singletonName():String {
			return SINGLETON_MANANGER;
		}
		
		/**
		 * 单例的引用
		 * 
		 */
		public function get singleRefrence():* {
			return getInstance();
		}
	}
}